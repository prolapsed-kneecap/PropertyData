# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dhqjKd1Wlm00JlOX1zIa-hBNr83BCicF
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

df1 = pd.read_csv("train.csv")

df2 = pd.read_csv("macro.csv")

df = pd.merge(df1, df2, on=['timestamp', 'timestamp'])

df.isna().sum()

df = df.drop(columns = ['provision_retail_space_sqm', 'provision_retail_space_modern_sqm', 'theaters_viewers_per_1000_cap', 'students_reg_sports_share', 'museum_visitis_per_100_cap', 'students_reg_sports_share', 'load_of_teachers_preschool_per_teacher'])

df.dropna(axis = 'index', subset = ['floor', 'railroad_station_walk_km', 'railroad_station_walk_min', 'ID_railroad_station_walk', 'prom_part_5000', 'cafe_sum_5000_min_price_avg', 'cafe_sum_5000_max_price_avg', 'cafe_avg_price_5000', 'metro_min_walk', 'metro_km_walk'], inplace = True)
df = df.assign(is_investment = (df['product_type'] == "Investment"))
df = df.drop(columns = 'child_on_acc_pre_school')

df['modern_education_share'] = df['modern_education_share'].str.replace(',', '.')
df['old_education_build_share'] = df['old_education_build_share'].str.replace(',', '.')

df.replace({"no" : "0", "yes" : '1', "no data" : "0", "poor" : "1", 'satisfactory' : '2', 'good' : '3', 'excellent' : '4'}, inplace=True)

df = df.drop(columns = ['timestamp', 'sub_area', 'product_type'])

df = df.apply(lambda col : col.astype('float64'))
df = df.apply(lambda col: col.fillna(col.median()))

x_d = df.drop(columns = 'price_doc')
y_d = df['price_doc']

x_train, x_test, y_train, y_test = train_test_split(x_d, y_d, test_size=0.4)

df = df[(df["price_doc"] != df["price_doc"].max()) & (df["price_doc"] != 0)]
df = df[df["full_sq"] != df["full_sq"].max()]



model_r = LinearRegression()

model_r.fit(x_train, y_train)

y_pred_r = model_r.predict(x_test)

print(mean_squared_error(y_test, y_pred_r))
print(r2_score(y_test, y_pred_r))

plt.scatter(x_test.full_sq, y_test, color="black")
plt.plot(x_test.full_sq, y_pred_r, color="blue", linewidth=3, alpha=0.5)
plt.show()

model_f = RandomForestRegressor(n_estimators=100, max_features = 'sqrt')

model_f.fit(x_train, y_train)

y_pred_f = model_r.predict(x_test)

print(mean_squared_error(y_test, y_pred_f))
print(r2_score(y_test, y_pred_f))

plt.scatter(x_test.full_sq, y_test, color="black")
plt.plot(x_test.full_sq, y_pred_f, color="blue", linewidth=3, alpha=0.5)
plt.show()

